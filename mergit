#!/usr/bin/env bash
# Author : Tatiana Zihindula ~ 21/10/2018

# This Script merges the master branch in '$source
# into the master branch of '$destination'; the final merged branch
# NOTE: both $source and $destination must be in the same parent directory.

# This allows to merge small projects while keeping the commits revisions from both

program=$(basename $0)
# escape the trailling '/' to get the repositories' basenames.
repo1=$(echo -e "${1/\/}")
repo2=$(echo -e "${2/\/}")
# check if $PWD is the parent directory of both directories.
count=$(find ./ -type d -maxdepth 1 | grep -cw -e "$source" -e "$destination")
! [ -z $source ] && ! [ -z $destination ] ||  count=-1
# colors
RED="\033[0;31m"; GREEN="\033[1;32m"; ORANGE="\033[1;33m"; RESET="\033[1;0m"

function check_error() {
    if [ $1 -ne 0 ]; then
      echo -e $RED"\n$program: error: $2"$RESET && cleanup && exit
    fi
}
function cleanup() {
    merge_info "Cleaning up...\n"
    builtin cd ../ && builtin cd $destination >/dev/null 2>&1
    git remote rm $source >/dev/null 2>&1
    return 0
}
function check_status() {
	git status >/dev/null 2>&1 && check_error $? "$program:git status:'$1' should be 'All clean!'"
	git pull >/dev/null 2>&1 && check_error $? "$program:git pull:'$1' should be 'Already up to date.'"
}
function merge_info(){
    echo -e "\n"$2$1$RESET
}

merge_info 'Searching repositories...' $ORANGE
test $count -eq 2
check_error $? "2 valid git repositories required.
	          Possible Fixes:
		    - change to parent directory
		    - enter valid git repository names.

		USAGE: $0 source destination"

# Ensure both repositories are All Clean and Up-To-Date
builtin cd "./$source" && check_status $source
builtin cd "../$destination" && check_status $destination

merge_info "Adding remote '$source' to repository '$destination'..."
git remote add $source ../$source
check_error $? "failed to add '$source' as a remote branch."

merge_info "Fetching remote branch '$destination'..."
git remote update >/dev/null 2>&1

# This will open $EDITOR to edit the merge reason.
merge_info "Merging branches...\n\n" $ORANGE
git merge --allow-unrelated-histories "$source/master"

# Now merge repo1/master into repo2/master
git push origin master >/dev/null 2>&1

merge_info "\n-> head of destination '$destination'\n" $RED
# check if changes are reflected i.e if head points to new merge.
git log -n 1 --graph --pretty=format:'%h - %C(bold green)(%cr)%Creset%C(yellow):%s:%C(bold blue)%d%Creset'

# Cleanup: remove remote branches etc.
cleanup

merge_info "Merge Complete ðŸ‘»\n" $GREEN

# go back to initial parent directory
builtin cd "../"
